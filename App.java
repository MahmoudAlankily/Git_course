المتغيرات وأنواع البيانات في **جافا** هما الأساس لبناء أي برنامج. سأقوم بشرحهم بشكل مفصل مع أمثلة عملية حتى تتمكن من فهمهم جيداً.

### 1. **المتغيرات (Variables)**

#### ما هو المتغير؟
- المتغير هو مكان في الذاكرة يُستخدم لتخزين القيم. كل متغير له نوع بيانات يحدد نوع القيمة التي يمكن تخزينها فيه.

#### كيفية تعريف المتغيرات في جافا:
- الصيغة الأساسية لتعريف المتغير هي:
  ```java
  <نوع البيانات> <اسم المتغير> = <قيمة>;
  ```
- مثال:
  ```java
  int age = 25;
  ```

### 2. **أنواع البيانات في جافا**

تنقسم أنواع البيانات في جافا إلى فئتين رئيسيتين:
1. **أنواع البيانات الأولية (Primitive Data Types)**
2. **أنواع البيانات المرجعية (Reference Data Types)**

#### 1. أنواع البيانات الأولية (Primitive Data Types):
هذه هي الأنواع التي تمثل القيم البسيطة مثل الأعداد والحروف والقيم المنطقية.

##### الأنواع الرئيسية:
1. **الأعداد الصحيحة (Integers)**:
   - تستخدم لتخزين الأرقام بدون كسور عشرية.
   - الأنواع المتاحة:
     - **byte**: يخزن أعدادًا من -128 إلى 127 (حجم 1 بايت).
     - **short**: يخزن أعدادًا من -32,768 إلى 32,767 (حجم 2 بايت).
     - **int**: يخزن أعدادًا من -2,147,483,648 إلى 2,147,483,647 (حجم 4 بايت) – الأكثر استخدامًا.
     - **long**: يخزن أعدادًا كبيرة جدًا (حجم 8 بايت).

     - **مثال**:
       ```java
       int number = 100;  // تعريف متغير عدد صحيح
       ```

2. **الأعداد العشرية (Floating Point Numbers)**:
   - تستخدم لتخزين الأرقام مع الكسور العشرية.
   - الأنواع المتاحة:
     - **float**: دقة 32 بت (حجم 4 بايت).
     - **double**: دقة 64 بت (حجم 8 بايت) – الأكثر استخدامًا.
  
     - **مثال**:
       ```java
       double salary = 45000.75;  // تعريف متغير عدد عشري
       ```

3. **القيم المنطقية (Boolean)**:
   - تستخدم لتخزين قيمة منطقية: `true` أو `false`.
   - **مثال**:
     ```java
     boolean isStudent = true;  // تعريف متغير منطقي
     ```

4. **الحروف (Characters)**:
   - تستخدم لتخزين حرف واحد.
   - النوع المتاح:
     - **char**: يخزن حرفًا واحدًا (حجم 2 بايت).
     - **مثال**:
       ```java
       char grade = 'A';  // تعريف متغير حرف
       ```

#### 2. أنواع البيانات المرجعية (Reference Data Types):
هذه الأنواع تُستخدم لتخزين الكائنات (Objects) وتشير إلى مواقع الذاكرة التي تحتوي على هذه الكائنات.

##### الأنواع الرئيسية:
1. **String**:
   - يستخدم لتخزين سلسلة من الأحرف (النصوص).
   - **مثال**:
     ```java
     String name = "Ahmed";  // تعريف متغير نصي
     ```

2. **الكائنات (Objects)**:
   - جميع الكائنات في جافا تُخزن كمرجع، على سبيل المثال، كائن من فئة معينة يتم تخزينه كمرجع.

### 3. **التحويل بين الأنواع (Type Casting)**
في بعض الأحيان، قد تحتاج إلى تحويل نوع متغير إلى نوع آخر.

#### أنواع التحويل:
1. **التحويل الضمني (Implicit Casting)**:
   - يتم تلقائيًا عندما يكون التحويل بين أنواع متوافقة ولا يفقد البيانات.
   - مثال:
     ```java
     int num = 100;
     double d = num;  // تحويل ضمني من int إلى double
     ```

2. **التحويل الصريح (Explicit Casting)**:
   - يتم عند تحويل نوع أكبر إلى نوع أصغر، وقد يتم فقدان بعض البيانات.
   - مثال:
     ```java
     double d = 9.78;
     int num = (int) d;  // تحويل صريح من double إلى int
     ```

### 4. **الثوابت (Constants)**
إذا كنت تريد أن تجعل قيمة متغير غير قابلة للتغيير، يمكنك استخدام الكلمة المفتاحية `final`.
- **مثال**:
  ```java
  final int DAYS_IN_WEEK = 7;
  ```

### 5. **ممارسات أفضل عند تسمية المتغيرات**
   - اختر أسماء تعبر عن محتوى المتغير.
   - استخدم صيغة **camelCase** عند تسمية المتغيرات.
   - **مثال**:
     ```java
     int totalPrice;   // اسم متغير واضح باستخدام camelCase
     ```

### 6. **مثال شامل يوضح المتغيرات وأنواع البيانات:**
```java
public class DataTypesExample {
    public static void main(String[] args) {
        // المتغيرات الأولية
        int age = 30;
        double salary = 50000.75;
        char grade = 'A';
        boolean isEmployed = true;

        // متغير نصي
        String name = "Ali";

        // طباعة القيم
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
        System.out.println("Salary: " + salary);
        System.out.println("Grade: " + grade);
        System.out.println("Is Employed: " + isEmployed);

        // التحويل بين الأنواع
        int roundedSalary = (int) salary;  // تحويل صريح
        System.out.println("Rounded Salary: " + roundedSalary);
    }
}
```

### **النقاط الرئيسية التي يجب تذكرها**:
- المتغيرات هي حاويات لتخزين البيانات.
- يجب دائمًا تحديد نوع البيانات عند تعريف المتغيرات.
- التحويل بين الأنواع يتطلب الانتباه لتجنب فقدان البيانات.
- جافا تحتوي على أنواع بيانات أولية مرنة ومناسبة لتخزين أنواع مختلفة من البيانات.
  
هذه هي المبادئ الأساسية للمتغيرات وأنواع البيانات في جافا. يمكنك الآن الانتقال إلى مواضيع أكثر تقدمًا بعد التمرن على هذه الأساسيات.
